#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "twirlio/nodes.rb"
  require "twirlio/lexer.rb"

class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 30)

  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code) # Tokenize the code using our lexer
    puts @tokens.inspect if show_tokens
    do_parse # Kickoff the parsing process
  end

  def next_token
    @tokens = [] unless @tokens
    @tokens.shift
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,    12,     6,     7,     2,     9,    10,     5,     7,    13,
    14,    15 ]

racc_action_check = [
     7,     7,     2,     2,     0,     3,     5,     1,     9,    11,
    12,    13 ]

racc_action_pointer = [
     2,     7,     0,     3,   nil,     6,   nil,    -3,   nil,     5,
   nil,     5,     8,     9,   nil,   nil ]

racc_action_default = [
    -1,    -8,    -8,    -3,    -4,    -8,    -2,    -8,    -5,    -8,
    16,    -8,    -8,    -8,    -7,    -6 ]

racc_goto_table = [
     4,     3,     1,     8 ]

racc_goto_check = [
     3,     2,     1,     3 ]

racc_goto_pointer = [
   nil,     2,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 6, :_reduce_1,
  2, 6, :_reduce_2,
  1, 6, :_reduce_3,
  1, 7, :_reduce_4,
  2, 7, :_reduce_5,
  5, 8, :_reduce_6,
  4, 8, :_reduce_7 ]

racc_reduce_n = 8

racc_shift_n = 16

racc_token_table = {
  false => 0,
  :error => 1,
  :PAREN => 2,
  :IDEN => 3,
  :STRING => 4 }

racc_nt_base = 5

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "PAREN",
  "IDEN",
  "STRING",
  "$start",
  "program",
  "expressions",
  "expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_2(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_3(val, _values, result)
     result = Nodes.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_4(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_5(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_6(val, _values, result)
     result = StepNode.new val[2], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_7(val, _values, result)
     result = WelcomeNode.new val[2] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
